<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:sm="http://servicemix.apache.org/config/1.0" 
	   xmlns:foo="http://servicemix.org/cheese/">

  <!-- the JBI container -->
  <sm:container id="jbi" embedded="true">
    <sm:activationSpecs>

      <sm:activationSpec componentName="receiver" service="foo:receiver">
      	<sm:component>
        	<bean class="org.apache.servicemix.tck.ReceiverComponent" />
        </sm:component>
      </sm:activationSpec>

      <!-- output using a POJO -->
      <sm:activationSpec componentName="myService" service="foo:myService">
      	<sm:component>
	        <bean class="org.apache.servicemix.components.groovy.GroovyComponent">
        		<property name="scriptText">
          			<value><![CDATA[

println "Called with inbound message $inMessage"

// lets output some message properties
outMessage.properties.foo = "hello"
outMessage.properties.someList = [1, 2, 3]

// lets output some non-xml body
outMessage.body = [3, 2, 1]
            		]]></value>
            	</property>
            </bean>
        </sm:component>
      </sm:activationSpec>

      <!-- output using a String -->
      <!-- START SNIPPET: xmlText -->
      <sm:activationSpec componentName="myServiceUsingXMLText"
        service="foo:myServiceUsingXMLText">
        <sm:component>
          <bean class="org.apache.servicemix.components.groovy.GroovyComponent">
            <property name="scriptText">
              <value>
                <![CDATA[

// lets output some message properties
outMessage.properties = [foo:"hello", someList:[1, 2, 3]]

// lets output some non-xml body
outMessage.bodyText = """
<hello>
  <world person="$inMessage.properties.name" location="London"/>
</hello>
"""
                ]]>
              </value>
            </property>
          </bean>
        </sm:component>
      </sm:activationSpec>
      <!-- END SNIPPET: xmlText -->

      <!-- output using Groovy Markup -->
      <sm:activationSpec componentName="myServiceWithBuilder" service="foo:myServiceWithBuilder">
        <sm:component><bean class="org.apache.servicemix.components.groovy.GroovyComponent">
          <property name="scriptText">
            <value>
              <![CDATA[

// lets output some message properties
def props = outMessage.properties
props.foo = "hello"
props.someList = [1, 2, 3]

// lets output some XML using GroovyMarkup
outMessage.body = builder.hello(version:1.2) {
  world(person:inMessage.properties.name, location:'London')
}
              ]]>
            </value>
          </property>
        </bean></sm:component>
      </sm:activationSpec>

      <!-- output using a POJO reqeust and sends a POJO response  -->
      <sm:activationSpec componentName="myServicePOJO" service="foo:myServicePOJO">
        <sm:component><bean class="org.apache.servicemix.components.groovy.GroovyComponent">
          <property name="scriptText">
            <value>
              <![CDATA[

def body = inMessage.body

println "Called with input $body"

// lets output some message properties
outMessage.properties.foo = "hello"
outMessage.properties.someList = [1, 2, 3]

// lets output some non-xml body
outMessage.body = [body.name, body.length, body.addresses]
              ]]>
            </value>
          </property>
        </bean></sm:component>
      </sm:activationSpec>

    </sm:activationSpecs>
  </sm:container>


  <!-- START SNIPPET: client -->
  <bean id="client" class="org.apache.servicemix.client.DefaultServiceMixClient">
    <constructor-arg ref="jbi" />
  </bean>
  <!-- END SNIPPET: client -->

  <!-- lets hardwire this client to talk to instances of a service by default -->
  <!-- START SNIPPET: clientroute -->
  <bean id="clientWithRouting" class="org.apache.servicemix.client.DefaultServiceMixClient">
    <constructor-arg ref="jbi" />
    <constructor-arg>
      <sm:activationSpec destinationService="foo:receiver"/>
    </constructor-arg>
  </bean>
  <!-- END SNIPPET: clientroute -->


  <bean id="clientWithXStream" class="org.apache.servicemix.client.DefaultServiceMixClient">
    <constructor-arg ref="jbi" />
    <constructor-arg>
      <!-- lets hardwire this client to talk to instances of a service by default -->
      <sm:activationSpec>
        <property name="marshaler">
          <bean class="org.apache.servicemix.components.util.xstream.XStreamMarshaler" />
        </property>
      </sm:activationSpec>
    </constructor-arg>
  </bean>

</beans>
