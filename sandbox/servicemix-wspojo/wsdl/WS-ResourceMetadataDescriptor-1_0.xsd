<?xml version="1.0"?>

<!--

OASIS takes no position regarding the validity or scope of any
intellectual property or other rights that might be claimed to pertain
to the implementation or use of the technology described in this
document or the extent to which any license under such rights might or
might not be available; neither does it represent that it has made any
effort to identify any such rights. Information on OASIS's procedures
with respect to rights in OASIS specifications can be found at the
OASIS website. Copies of claims of rights made available for
publication and any assurances of licenses to be made available, or the
result of an attempt made to obtain a general license or permission for
the use of such proprietary rights by implementors or users of this
specification, can be obtained from the OASIS Executive Director.

OASIS invites any interested party to bring to its attention any
copyrights, patents or patent applications, or other proprietary rights
which may cover technology that may be required to implement this
specification. Please address the information to the OASIS Executive
Director.

Copyright (C) OASIS Open (2004). All Rights Reserved.

This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it or
assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and this paragraph are
included on all such copies and derivative works. However, this
document itself may not be modified in any way, such as by removing the
copyright notice or references to OASIS, except as needed for the
purpose of developing OASIS specifications, in which case the
procedures for copyrights defined in the OASIS Intellectual Property
Rights document must be followed, or as required to translate it into
languages other than English.

The limited permissions granted above are perpetual and will not be
revoked by OASIS or its successors or assigns.

This document and the information contained herein is provided on an
"AS IS" basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

-->
<schema
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:wsrf-rp="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd"
  targetNamespace=
  "http://docs.oasis-open.org/wsrf/2004/10/wsrf-WSResourceMetadataDescriptor-1.0-draft-01.xsd"
  xmlns:wsrmd=
  "http://docs.oasis-open.org/wsrf/2004/10/wsrf-WSResourceMetadataDescriptor-1.0-draft-01.xsd"
  elementFormDefault="qualified">

  <import
    namespace="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd"
    schemaLocation="WS-ResourceProperties-1_2-Draft_01.xsd"/>

  <!-- ======================== Utility Types ======================= -->
  <simpleType name="PairsOfURIType">
    <list itemType="xsd:anyURI"/>
  </simpleType>

  <!-- ================ PortType Attribute Extensions ================ -->
  <simpleType name="SpecializesType">
    <list itemType="xsd:QName"/>
  </simpleType>

  <attribute name="specializes" type="wsrmd:SpecializesType"/>

  <attribute name="metadataDescriptor" type="xsd:QName"/>

  <attribute name="metadataDescriptorLocation" type="wsrmd:PairsOfURIType"/>

  <!-- ================= Documentation Component ==================== -->
  <complexType name="DocumentationType" mixed="true">
    <sequence>
      <any namespace="##any" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
    </sequence>
    <anyAttribute/>
  </complexType>

  <complexType name="DocumentedType">
    <sequence>
      <element name="documentation" type="wsrmd:DocumentationType" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>

  <!-- ================== Definitions Component ===================== -->
  <!--
  <Definitions
  targetNamespace="xsd:anyURI"
  {anyAttribute}* >

  <documentation />?
  <MetadataDescriptor /> *
  {any}*

  </Definitions>
  -->

  <complexType name="DefinitionsType">
    <complexContent>
      <extension base="wsrmd:DocumentedType">
        <sequence>
          <element ref="wsrmd:MetadataDescriptor" minOccurs="0" maxOccurs="unbounded"/>
          <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </sequence>
        <attribute name="targetNamespace" type="xsd:anyURI" use="required"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </extension>
    </complexContent>
  </complexType>

  <element name="Definitions" type="wsrmd:DefinitionsType">
    <key name="MetadataDescriptor">
      <annotation>
        <documentation>
To form a QName, the name of any MetadataDescriptor must be
unique within a Definitions element.
        </documentation>
      </annotation>
      <selector xpath="wsrmd:MetadataDescriptor"/>
      <field xpath="@name"/>
    </key>
  </element>

  <!-- =============== MetadataDescriptor Component =================== -->
  <!--
<MetadataDescriptor
name="xsd:NCName"
interface="xsd:QName"
specializes="list of xsd:QName"?
wsdlLocation="list of xsd:anyUri"?
metadataDescriptorLocation="list of xsd:anyUri"?
{anyAttribute}* >

<documentation />?
<Property /> *
<Operation /> *
{any}*

</MetadataDescriptor>
  -->

  <complexType name="MetadataDescriptorType">
    <complexContent>
      <extension base="wsrmd:DocumentedType">
        <sequence>
          <element ref="wsrmd:Property" minOccurs="0" maxOccurs="unbounded"/>
          <element ref="wsrmd:Operation" minOccurs="0" maxOccurs="unbounded"/>
          <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </sequence>
        <attribute name="name" type="xsd:NCName" use="required"/>
        <attribute name="interface" type="xsd:QName" use="required"/>
        <attribute name="specializes" type="wsrmd:SpecializesType"/>
        <attribute name="wsdlLocation" type="wsrmd:PairsOfURIType"/>
        <attribute name="metadataDescriptorLocation" type="wsrmd:PairsOfURIType"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </extension>
    </complexContent>
  </complexType>

  <element name="MetadataDescriptor" type="wsrmd:MetadataDescriptorType"/>

  <!-- ==================== Property Component ====================== -->
  <!--
  <Property
  path="xsd:QName [/ [xsd:QName | xsd:NCName ]]*
  [/@[xs:QName | xs:NCName ]]?"
  mutability="[constant|appendable|mutable]" ?
  modifiability="[read-only|read-write]" ?
  subscribability="xs:boolean" ?
  {anyAttribute}* >

  <documentation />?
  [ <ValidValues> {any}* </ValidValues> |
  <ValidValueRange lowerBound='xsd:simpleType'
  upperBound='xsd:simpleType'>
  </ValidValueRange> ] ?
  <StaticValues> {any}* </StaticValues> ?

  {any} *

  </Property>
  -->
  <complexType name="PropertyType">
    <complexContent>
      <extension base="wsrmd:DocumentedType">
        <sequence>
          <choice>
            <element ref="wsrmd:ValidValues" minOccurs="0" maxOccurs="1"/>
            <element ref="wsrmd:ValidValueRange" minOccurs="0" maxOccurs="1"/>
          </choice>
          <element ref="wsrmd:StaticValues" minOccurs="0" maxOccurs="1"/>
          <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </sequence>
        <attribute name="path" type="wsrmd:PathType" use="required"/>
        <attribute name="mutability" type="wsrmd:MutabilityType"/>
        <attribute name="modifiability" type="wsrmd:ModifiabilityType"/>
        <attribute name="subscribability" type="xsd:boolean" default="false"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </extension>
    </complexContent>
  </complexType>

  <element name="Property" type="wsrmd:PropertyType"/>

  <simpleType name="PathType">
    <restriction base="xsd:token">
      <annotation>
        <documentation>
The pattern language in XSD is hard to follow, and harder to write.

Since the pattern is almost impossible to figure out, here is a key:
QName pattern is: [\i-[:]][\c-[:]]*:)? [\i-[:]][\c-[:]]*
an optional prefix bit:
ie any initial character (except :) followed by zero or more
chars (not :)
followed by a :
followed by a mandatory NCName bit (see below)
NCName pattern is: [\i-[:]][\c-[:]]*
ie any "initial character" (except :) followed by zero or more
chars (not :)

The path pattern is
xsd:QName [/ [xsd:QName | xsd:NCName ]]* [/@[xs:QName | xs:NCName
]]?

        </documentation>
      </annotation>
      <pattern value=
      "(([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*)(/(([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*)|([\i-[:]][\c-[:]]*))* (/@(([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*)|([\i-[:]][\c-[:]]*))?"/>
      <!--( QName [/ QName
      | NCName ]* @ QName |
      NCName ]?-->
    </restriction>
  </simpleType>

  <simpleType name="MutabilityType">
    <restriction base="xsd:string">
      <enumeration value="constant"/>
      <enumeration value="appendable"/>
      <enumeration value="mutable"/>
    </restriction>
  </simpleType>

  <simpleType name="ModifiabilityType">
    <restriction base="xsd:string">
      <enumeration value="read-only"/>
      <enumeration value="read-write"/>
    </restriction>
  </simpleType>

  <!-- ================= Valid Values Component ===================== -->
  <!--
  <ValidValues
  {anyAttribute}* >
  <documentation />?
  {any}*
  </ValidValues>
  -->
  <complexType name="ValidValuesType" mixed="true">
    <sequence>
      <element name="documentation" type="wsrmd:DocumentationType" minOccurs="0" maxOccurs="1"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
    </sequence>
    <anyAttribute namespace="##other" processContents="lax"/>
  </complexType>

  <element name="ValidValues" type="wsrmd:ValidValuesType"/>

  <!-- ================= Valid Range Component ===================== -->
  <!--
  <ValidValueRange
  lowerBound="xs:anySimpleType" ? upperBound="xs:anySimpleType" ?
  {anyAttribute}* >
  <documentation />?
  {any}*
  </ValidValueRange>
  -->
  <complexType name="ValidValueRangeType" mixed="true">
    <sequence>
      <element name="documentation" type="wsrmd:DocumentationType" minOccurs="0" maxOccurs="1"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
    </sequence>
    <attribute name="lowerBound" type="xsd:anySimpleType"/>
    <attribute name="upperBound" type="xsd:anySimpleType"/>
    <anyAttribute namespace="##other" processContents="lax"/>
  </complexType>

  <element name="ValidValueRange" type="wsrmd:ValidValueRangeType"/>

  <!-- ================ Static Values Component ===================== -->
  <!--
  <StaticValues
  {anyAttribute}* >
  <documentation />?
  {any}*
  </StaticValues>
  -->
  <complexType name="StaticValuesType" mixed="true">
    <sequence>
      <element name="documentation" type="wsrmd:DocumentationType" minOccurs="0" maxOccurs="1"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
    </sequence>
    <anyAttribute namespace="##other" processContents="lax"/>
  </complexType>

  <element name="StaticValues" type="wsrmd:StaticValuesType"/>

  <!-- =================== Operation Component ====================== -->
  <!--
  <Operation
  name="xs:NCName"
  idempotent="xs:Boolean" ?
  {anyAttribute}* >
  <documentation>?
  {any}

  </Operation>
  -->
  <complexType name="OperationsType">
    <complexContent>
      <extension base="wsrmd:DocumentedType">
        <sequence>
          <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </sequence>
        <attribute name="name" type="xsd:NCName" use="required"/>
        <attribute name="idempotent" type="xsd:boolean" default="false"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </extension>
    </complexContent>
  </complexType>

  <element name="Operation" type="wsrmd:OperationsType"/>

  <!-- ======== MetadataDescriptorRef Resource Property GED========== -->
  <!--
  <MetadataDescriptorRef
  name="xs:QName"
  metadataDescriptorLocation="list of xs:anyURI" ?
  {anyAttribute}* >
  <documentation>?
  {any}

  </MetadataDescriptorRef>
  -->
  <complexType name="MetadataDescriptorRefType">
    <complexContent>
      <extension base="wsrmd:DocumentedType">
        <sequence>
          <any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </sequence>
        <attribute name="name" type="xsd:QName" use="required"/>
        <attribute name="metadataDescirptorLocation" type="wsrmd:PairsOfURIType"/>
        <anyAttribute namespace="##other" processContents="lax"/>
      </extension>
    </complexContent>
  </complexType>

  <element name="MetadataDescriptorRef" type="wsrmd:MetadataDescriptorRefType"/>

</schema>
